
# global variables
.variables: &global-variables
  MOLECULE_SCENARIO_NAME: hetznercloud

.GitChanged: &GitChanged
  name: trigger
  image: plugins/git
  pull: always
  commands:
    - test "$FORCE" = "true" && exit 0
    - test $DRONE_BUILD_EVENT = "pull_request"
      && DIFF_STRING=origin/${DRONE_COMMIT_BRANCH:-master}
      || DIFF_STRING=${DRONE_COMMIT_SHA}~
    - git --no-pager diff --exit-code --name-only $DIFF_STRING ':!.ansible-lint' ':!.drone.yml' ':!Makefile' ':!.github/*' ':!.yamllint' && exit 78 || echo "files changed"

.Molecule: &Molecule
  name: molecule
  image: gitea.msqu.de/devops/molecule:ansible
  pull: always
  environment:
    ANSIBLE_FORCE_COLOR: '1'
    ANSIBLE_VAULT_PASSWORD:
      from_secret: ANSIBLE_VAULT_PASSWORD
    DRONE_SHELL: /bin/bash
    HCLOUD_TOKEN:
      from_secret: HCLOUD_TOKEN
    PY_COLORS: '1'
    SSH_PRIVATE_KEY:
      from_secret: SSH_PRIVATE_KEY
  commands:
    - &MoleculeCommands |
      EXITCODE=0
      # set some values
      export CI_PROJECT_DIR=$DRONE_WORKSPACE_BASE
      export CI_JOB_ID=$DRONE_BUILD_NUMBER
      export CI_HOSTNAME=$(echo $MOLECULE_DISTRO | tr -dc '[:alnum:]\n\r' | tr '[:upper:]' '[:lower:]')
      export CI_PROJECT_NAME_MOLECULE=$(echo $CI_PROJECT_NAME | tr '_' '-')
      export ANSIBLE_ROOT_REPO=ansible
      export RANDOM_SUBNET_IP=$(shuf -i 2-254 -n 1)
      export RANDOM_SUBNET_NAME=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 16 | head -n 1)
      # real action begins here
      molecule --version
      echo $ANSIBLE_VAULT_PASSWORD > $CI_PROJECT_DIR/.vault
      # Add SSH Key
      mkdir -p ~/.ssh/
      echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
      chmod 600 ~/.ssh/id_rsa
      echo -e "Host *\n StrictHostKeyChecking no\n UserKnownHostsFile=/dev/null\n" > ~/.ssh/config
      eval "$(ssh-agent -s)"
      echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - >/dev/null
      # get molecule scenarios
      mkdir -p $CI_PROJECT_DIR/molecule/default
      cd $HOME
      git clone --depth 1 https://$CI_SERVER_HOST/$ANSIBLE_ROOT_REPO/molecule.git
      rsync -avzh --ignore-existing --ignore-errors molecule/$MOLECULE_SCENARIO_NAME/ $CI_PROJECT_DIR/molecule/default/
      # tests directory does not exist
      if [[ "$TEST_TYPE" == "unit" || "$TEST_TYPE" == "destroy" ]] && [[ ! -d "$CI_PROJECT_DIR/tests" ]]; then yq -i 'del(.provisioner.inventory)' $CI_PROJECT_DIR/molecule/default/molecule.yml; fi
      # tests directory vars.yml exists
      if [[ "$TEST_TYPE" == "unit" && -f "$CI_PROJECT_DIR/tests/vars.yml" ]]; then mkdir -p $CI_PROJECT_DIR/group_vars/all/ && rsync -aP --remove-source-files $CI_PROJECT_DIR/tests/vars.yml $CI_PROJECT_DIR/group_vars/all/${CI_JOB_ID}.yml; fi
      # get real world values
      if [[ "$TEST_TYPE" == "integration" ]]; then git clone --depth 1 --filter=blob:none --no-checkout https://$CI_SERVER_HOST/$ANSIBLE_ROOT_REPO/infra.git; fi
      if [[ "$TEST_TYPE" == "integration" ]]; then cd infra && git checkout main -- group_vars && rsync -aP --remove-source-files group_vars $CI_PROJECT_DIR; fi
      # fix requirements.yml URLs + Tokens
      cd $CI_PROJECT_DIR
      if [ -f "requirements.yml" ]; then sed -i "s,ssh://git@gitea.msqu.de:22222,https://gitea.msqu.de,g" requirements.yml; fi
      if [ -f "requirements.yml" ]; then sed -i "s,git@github.com:,https://github.com/,g" requirements.yml; fi
      # start molecule testing
      if [[ "$TEST_TYPE" == "unit" || "$TEST_TYPE" == "integration" ]]; then cd $CI_PROJECT_DIR && molecule test || EXITCODE=$?; fi
      cd $CI_PROJECT_DIR && molecule destroy
      test $EXITCODE -eq 0 && echo "All Fine!" || echo "Something bad happened";
      exit $EXITCODE

---
name: Ansible Molecule
description: Run Ansible Molecule
author: Michael Schmitz

inputs:
  ansible_vault_password:
    description: 'Password for decrypting the vault'
    required: true
  distro:
    description: 'Execute tests against distribution'
    default: 'debian-11'
    required: true
  gitea_username:
    description: 'Username for Gitea authentication'
    required: true
  gitea_token:
    description: 'Token for Gitea authentication'
    required: true
  token:
    description: 'A Github PAT'
    required: true
  test_type:
    description: 'Choose between: unit|integration'
    required: true
    default: 'unit'

runs:
  using: "composite"
  steps:
    - name: Check out the codebase
      uses: actions/checkout@v3

    - name: Check out the molecule
      uses: actions/checkout@v3
      with:
        repository: msqu-cicd/molecule
        token: ${{ inputs.token }}
        path: 'git_molecule'

    - name: Check out the infra
      uses: actions/checkout@v3
      with:
        repository: msqu-cicd/infra
        token: ${{ inputs.token }}
        path: 'git_infra'

    # https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md
    - name: Uninstall preinstalled software
      run: sudo apt-get purge -y ansible python3-jinja2
      shell: bash

    - name: Set up Python 3
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Set CI_PROJECT_NAME_MOLECULE
      run: echo "CI_PROJECT_NAME_MOLECULE=$(echo $GITHUB_REPOSITORY_OWNER | tr '_' '-')" >> $GITHUB_ENV
      shell: bash

    - name: Prepare Ansible Vault
      run: echo ${{ inputs.ansible_vault_password }} > ${GITHUB_WORKSPACE}/.vault
      shell: bash

    - name: Prepare Molecule Scenario
      run: |
        mkdir -p ${GITHUB_WORKSPACE}/molecule/default
        rsync -avzh --ignore-existing --ignore-errors git_molecule/$MOLECULE_SCENARIO_NAME/ ${GITHUB_WORKSPACE}/molecule/default/
        sed -i "s,CI_PROJECT_DIR,GITHUB_WORKSPACE,g" ${GITHUB_WORKSPACE}/molecule/default/molecule.yml
      shell: bash
      env:
        MOLECULE_SCENARIO_NAME: docker

    - name: Sync unit vars to group_vars when exists
      run: if [[ "$TEST_TYPE" == "unit" ]] && [[ -f "${GITHUB_WORKSPACE}/tests/vars.yml" ]]; then mkdir -p ${GITHUB_WORKSPACE}/group_vars/all/ && rsync -aP ${GITHUB_WORKSPACE}/tests/ ${GITHUB_WORKSPACE}/molecule/default/group_vars/all/; fi
      shell: bash
      env:
        TEST_TYPE: "${{ inputs.test_type }}"

    - name: Sync integration vars to group_vars when exists
      run: if [[ "$TEST_TYPE" == "integration" ]]; then rsync -aP git_infra/group_vars ${GITHUB_WORKSPACE}/molecule/default/; fi
      shell: bash
      env:
        TEST_TYPE: "${{ inputs.test_type }}"

    - name: Update requirements.yml
      run: |
        if [ -f "${GITHUB_WORKSPACE}/requirements.yml" ]; then sed -i "s,ssh://git@gitea.msqu.de:22222/.*/,https://$GITHUB_TOKEN@github.com/${GITHUB_REPOSITORY_OWNER}/,g" ${GITHUB_WORKSPACE}/requirements.yml; fi
      shell: bash
      env:
        GITEA_USERNAME: ${{ inputs.gitea_username }}
        GITEA_TOKEN: ${{ inputs.gitea_token }}
        GITHUB_TOKEN: ${{ inputs.token }}

    - name: Install test dependencies
      run: pip install ansible ansible-lint molecule[docker] docker netaddr jmespath dnspython
      shell: bash

    - name: Pip list
      run: pip list
      shell: bash

    - name: Print molecule version infos
      run: molecule --version
      shell: bash

    - name: Run Molecule tests
      run: molecule test
      shell: bash
      env:
        ANSIBLE_FORCE_COLOR: '1'
        ANSIBLE_VERBOSITY: '2'
        GITEA_TOKEN: ${{ inputs.gitea_token }}
        GITEA_USERNAME: ${{ inputs.gitea_username }}
        GITHUB_TOKEN: ${{ inputs.token }}
        MOLECULE_DEBUG: '1'
        MOLECULE_DISTRO: "${{ inputs.distro }}"
        MOLECULE_SCENARIO_NAME: docker
        PY_COLORS: '1'
        TEST_TYPE: "${{ inputs.test_type }}"

---
name: Reusable molecule workflow

on:
  workflow_call:
    secrets:
      ANSIBLE_VAULT_PASSWORD:
        required: true
      ACCESS_TOKEN:
        required: true

jobs:

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out the codebase
        uses: actions/checkout@v3

      - name: Pull Lint image
        run: docker pull -q schmitzis/molecule:lint

      - name: Ansible Linting
        run: docker run --rm -v ${GITHUB_WORKSPACE}:/git -w /git schmitzis/molecule:lint ansible-lint -p --offline /git

      - name: Yaml Linting
        run: docker run --rm -v ${GITHUB_WORKSPACE}:/git -w /git schmitzis/molecule:lint yamllint -f parsable /git

  molecule:
    name: Molecule
    runs-on: ubuntu-latest
    needs:
      - lint
    strategy:
      fail-fast: false
      matrix:
        include:
          - distro: debian-11
            test_type: unit
          - distro: debian-11
            test_type: integration
          - distro: ubuntu-22.04
            test_type: unit
          - distro: ubuntu-22.04
            test_type: integration
    steps:
      - name: Check out the codebase
        uses: actions/checkout@v3

      - name: Check out the molecule
        uses: actions/checkout@v3
        with:
          repository: msqu-cicd/molecule
          token: ${{ secrets.ACCESS_TOKEN }}
          path: 'git_molecule'

      - name: Check out the infra
        uses: actions/checkout@v3
        with:
          repository: msqu-cicd/infra
          token: ${{ secrets.ACCESS_TOKEN }}
          path: 'git_infra'

      - name: Set up Python 3
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install yq via wget
        run: sudo wget -qO /usr/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 && sudo chmod +x /usr/bin/yq

      - name: Set CI_HOSTNAME
        run: echo "CI_HOSTNAME=$(echo $MOLECULE_DISTRO | tr -dc '[:alnum:]\n\r' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
        env:
          MOLECULE_DISTRO: "${{ matrix.distro }}"

      - name: Set CI_PROJECT_NAME_MOLECULE
        run: echo "CI_PROJECT_NAME_MOLECULE=$(echo $GITHUB_REPOSITORY_OWNER | tr '_' '-')" >> $GITHUB_ENV

      - name: Set RANDOM_SUBNET_IP
        run: echo "RANDOM_SUBNET_IP=$(shuf -i 2-254 -n 1)" >> $GITHUB_ENV

      - name: Set RANDOM_SUBNET_NAME
        run: echo "RANDOM_SUBNET_NAME=$(shuf -er -n20  {A..Z} {a..z} {0..9} | tr -d '\n')" >> $GITHUB_ENV

      - name: Prepare Ansible Vault
        run: echo ${{ secrets.ANSIBLE_VAULT_PASSWORD }} > ${GITHUB_WORKSPACE}/.vault

      - name: Prepare Molecule Scenario
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/molecule/default
          rsync -avzh --ignore-existing --ignore-errors git_molecule/$MOLECULE_SCENARIO_NAME/ ${GITHUB_WORKSPACE}/molecule/default/
          sed -i "s,CI_PROJECT_DIR,GITHUB_WORKSPACE,g" ${GITHUB_WORKSPACE}/molecule/default/molecule.yml
        shell: bash
        env:
          MOLECULE_SCENARIO_NAME: docker

      - name: Update Molecule inventory if tests directory does not exist
        run: if [[ "$TEST_TYPE" == "unit" || "$TEST_TYPE" == "destroy" ]] && [[ ! -d "${GITHUB_WORKSPACE}/tests" ]]; then yq -i 'del(.provisioner.inventory)' ${GITHUB_WORKSPACE}/molecule/default/molecule.yml; fi
        shell: bash
        env:
          TEST_TYPE: "${{ matrix.test_type }}"

      - name: Sync tests directory to group_vars when exists
        run: if [[ "$TEST_TYPE" == "unit" && -d "${GITHUB_WORKSPACE}/tests" ]]; then mkdir -p ${GITHUB_WORKSPACE}/group_vars/all/ && rsync -aP --remove-source-files ${GITHUB_WORKSPACE}/tests/ ${GITHUB_WORKSPACE}/group_vars/all/; fi
        shell: bash
        env:
          TEST_TYPE: "${{ matrix.test_type }}"

      - name: Prepare Molecule integration tests with infra variables
        run: if [[ "$TEST_TYPE" == "integration" ]]; then cd git_infra && rsync -aP --remove-source-files group_vars ${GITHUB_WORKSPACE}; fi
        shell: bash
        env:
          TEST_TYPE: "${{ matrix.test_type }}"

      - name: Update requirements.yml
        run: |
          if [ -f "${GITHUB_WORKSPACE}/requirements.yml" ]; then sed -i "s,ssh://git@gitea.msqu.de:22222,https://gitea.msqu.de,g" ${GITHUB_WORKSPACE}/requirements.yml; fi
          if [ -f "${GITHUB_WORKSPACE}/requirements.yml" ]; then sed -i "s,git@github.com:,https://github.com/,g" ${GITHUB_WORKSPACE}/requirements.yml; fi
        shell: bash

      - name: Install test dependencies
        run: pip install ansible ansible-lint molecule[docker] docker netaddr jmespath

      - name: Print molecule version infos
        run: molecule --version
        shell: bash

      - name: Run Molecule tests
        run: molecule test
        shell: bash
        env:
          ANSIBLE_FORCE_COLOR: '1'
          ANSIBLE_VERBOSITY: '2'
          CI_JOB_ID: "${{ github.run_id }}"
          MOLECULE_DEBUG: '1'
          MOLECULE_DISTRO: "${{ matrix.distro }}"
          MOLECULE_SCENARIO_NAME: docker
          PY_COLORS: '1'
          TEST_TYPE: "${{ matrix.test_type }}"
